top = textGrob("Two Sample test with different alpha values",
gp=gpar(fontsize=15)))
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[plot]
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)
p2 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.05)
p3 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.1)
p4 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.2)
grid.arrange(p1, p2, p3, p4,
# Numero de filas y columnas en los que los queremos sortear
ncol=2, nrow=2,
# Títulos
top = textGrob("Two Sample test with different alpha values",
gp=gpar(fontsize=15)))
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[2]
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[2]
p1
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[1]
p1
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[1]
p2 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.05)[1]
p3 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.1)[1]
p4 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.2)[1]
grid.arrange(p1, p2, p3, p4,
# Numero de filas y columnas en los que los queremos sortear
ncol=2, nrow=2,
# Títulos
top = textGrob("Two Sample test with different alpha values",
gp=gpar(fontsize=15)))
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[[1]]
p2 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.05)[[1]]
p3 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.1)[[1]]
p4 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.2)[[1]]
grid.arrange(p1, p2, p3, p4,
# Numero de filas y columnas en los que los queremos sortear
ncol=2, nrow=2,
# Títulos
top = textGrob("Two Sample test with different alpha values",
gp=gpar(fontsize=15)))
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[[1]]
p2 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.05)[[1]]
p3 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.1)[[1]]
p4 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.2)[[1]]
grid.arrange(p1, p2, p3, p4,
# Numero de filas y columnas en los que los queremos sortear
ncol=2, nrow=2,
# Títulos
top = textGrob("Two Sample test with different alpha values \n n1=50, sigma1=20, n2=50, sigma2=20, mu1-mu2=10,
x1-x2=10",
gp=gpar(fontsize=15)))
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[[1]]
p2 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.05)[[1]]
p3 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.1)[[1]]
p4 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.2)[[1]]
grid.arrange(p1, p2, p3, p4,
# Numero de filas y columnas en los que los queremos sortear
ncol=2, nrow=2,
# Títulos
top = textGrob("Two Sample test with different alpha values \n n1=50, sigma1=20, n2=50, sigma2=20, \n mu1-mu2=10,
x1-x2=10",
gp=gpar(fontsize=15)))
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[[1]]
p2 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.05)[[1]]
p3 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.1)[[1]]
p4 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.2)[[1]]
grid.arrange(p1, p2, p3, p4,
# Numero de filas y columnas en los que los queremos sortear
ncol=2, nrow=2,
# Títulos
top = textGrob("Two Sample test with different alpha values \n n1=50, sigma1=20, n2=50, sigma2=20, \n mu1-mu2=10, x1-x2=10",
gp=gpar(fontsize=15)))
# Power Function, El esqueleto posee como ejemplo como obtener la potencia de un z-test one-sample.
# Si utiliza este esqueleto deberá comentar la función que cumple cada una de las partes entregadas
power.z.test <- function(n1=NULL, sigma1=0.5,
n2=NULL, sigma2=0.5,
mu.Ha=0, mu.True=0, alfa=0.05){
if(is.null(n2)){
# Cálculo de power dado un sample
Z = qnorm(1-alfa)
denominador = sigma1/sqrt(n1)
X_bar = Z*denominador + mu.Ha
numerador = X_bar - mu.True
Z = numerador/denominador
Power = 1 - pnorm(Z)
# Se calculan los límites gráficos de power,
min_lim = min(rnorm(1000, mean=mu.Ha, sd=denominador)) -
round(min(rnorm(1000, mean=mu.Ha, sd=denominador)))%%10
max_lim = max(rnorm(1000, mean=mu.True, sd=denominador)) +
round(max(rnorm(1000, mean=mu.True, sd=denominador)))%%10
# Ploteo del power del test de hipotesis.
# En rojo queda la distribución del test de hipótesis, mientras que en azul la distribución real.
# Además, el área llenada en rojo es la visualización del power.
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominador),
col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
xlim = c(X_bar,max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", size=1) +
annotate(x=X_bar, y=+Inf,label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle("H0 vs Ha") +
xlab(expression(bar(X))) + ylab("Density")
}
if(!is.null(n2)){
# Cálculo de power dado un sample
Z = qnorm(1-alfa)
denominador1 = sigma1/sqrt(n1)
denominador2 = sigma2/sqrt(n2)
denominador = sqrt(denominador2^2 + denominador1^2)
X_bar = Z*(denominador)
Z = (X_bar - mu.Ha)/denominador
Power = 1 - pnorm(Z)
# Se calculan los límites gráficos de power,
min_lim = min(rnorm(1000, mean=0, sd=denominador)) -
round(min(rnorm(1000, mean=0, sd=denominador)))%%10
max_lim = max(rnorm(1000, mean=mu.Ha, sd=denominador)) +
round(max(rnorm(1000, mean=mu.Ha, sd=denominador)))%%10
# Ploteo del power del test de hipotesis.
# En rojo queda la distribución del test de hipótesis, mientras que en azul la distribución 2
# Además, el área llenada en rojo es la visualización del power.
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = denominador),
col='red') +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominador),
col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominador),
xlim = c(X_bar, max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", size=1) +
annotate(x=X_bar, y=+Inf,label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle(paste("H0 vs Ha, with alpha = ", alfa, sep = "")) +
xlab("Means Difference") + ylab("Density")
}
# Como R no permite retornar dos salidas usamos una lista
# Los resultados se llaman con $plot o $power
return(list(plot=plot,power=Power))
}
p1 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.025)[[1]]
p2 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.05)[[1]]
p3 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.1)[[1]]
p4 <- power.z.test(n1=50, sigma1=20, n2=50, sigma2=20, mu.Ha=10,
mu.True=10, alfa=0.2)[[1]]
grid.arrange(p1, p2, p3, p4,
# Numero de filas y columnas en los que los queremos sortear
ncol=2, nrow=2,
# Títulos
top = textGrob("Two Sample test with different alpha values \n n1=50, sigma1=20, n2=50, sigma2=20, \n mu1-mu2=10, x1-x2=10",
gp=gpar(fontsize=15)))
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
data <- read.csv("insurance.csv", stringsAsFactors = T)
head(data)
# Calculo de la matriz de correlacion para su visualización
pearson_matrix = cor(data, method = "pearson")
# Calculo de la matriz de correlacion para su visualización
pearson_matrix = cor(data[c(1,3,4,7)], method = "pearson")
round(pearson_matrix, 3)
# Visualización de la matriz de correlación
library(corrplot)
corrplot(pearson_matrix, type = "upper", tl.col = "black", tl.srt = 50)
lm_reg <- function(X, Y){
X_bar = mean(X)
Y_bar = mean(Y)
num = 0
den = 0
for (i in 1:length(X)){
num = num + (X[i]-X_bar)*(Y[i]-Y_bar)
den = den + (X[i]-X_bar)^2
}
b1 = num/den
b0 = Y_bar - b1*X_bar
return(b0, b1)
}
lm <- lm_reg(data$age, data$charges)
lm_reg <- function(X, Y){
X_bar = mean(X)
Y_bar = mean(Y)
num = 0
den = 0
for (i in 1:length(X)){
num = num + (X[i]-X_bar)*(Y[i]-Y_bar)
den = den + (X[i]-X_bar)^2
}
b1 = num/den
b0 = Y_bar - b1*X_bar
return(list(b0, b1))
}
lm <- lm_reg(data$age, data$charges)
lm
lm <- lm_reg(data$age, data$charges)
vals <- data.frame(age = lm[[1]], charges = lm[[2]])
plot <- ggplot(vals, aes(x=age, y=charges)) +
geom_point() +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression of charges") +
theme(plot.title = element_text(hjust = 0.5))
plot
lm <- lm_reg(data$age, data$charges)
plot <- ggplot(data, aes(x=age, y=charges)) +
geom_point() +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression of charges") +
theme(plot.title = element_text(hjust = 0.5))
plot
lm <- lm_reg(data$age, data$charges)
plot <- ggplot(data, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm[[1]], slope = lm[[2]], color="red") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression of charges") +
theme(plot.title = element_text(hjust = 0.5))
plot
# Calculo de la matriz de correlacion para su visualización
pearson_matrix = cor(data[c(1,3,4,7)], method = "pearson")
round(pearson_matrix, 3)
# Calculo de la matriz de correlacion para su visualización
correlation = cor(data[c(1,3,4,7)],
round(correlation, 3)
# Calculo de la matriz de correlacion para su visualización
correlation = cor(data[c(1,3,4,7)])
round(correlation, 3)
lm_reg <- function(X, Y){
X_bar = mean(X)
Y_bar = mean(Y)
num = 0
den = 0
for (i in 1:length(X)){
num = num + (X[i]-X_bar)*(Y[i]-Y_bar)
den = den + (X[i]-X_bar)^2
}
b1 = num/den
b0 = Y_bar - b1*X_bar
return(list(b0, b1))
}
lm <- lm_reg(data$age, data$charges)
plot <- ggplot(data, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm[[1]], slope = lm[[2]], color="red") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression of charges") +
theme(plot.title = element_text(hjust = 0.5))
plot
lm <- lm_reg(data$age, data$charges)
plot <- ggplot(data, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm[[1]], slope = lm[[2]], color="red") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression \nCharges vs Ages") +
theme(plot.title = element_text(hjust = 0.5))
plot
lm <- lm_reg(data$age, data$charges)
plot <- ggplot(data, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm[[1]], slope = lm[[2]], color="red") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression\nCharges vs Ages") +
theme(plot.title = element_text(hjust = 0.5))
plot
R2 = lm[[3]]
lm_reg <- function(X, Y){
X_bar = mean(X)
Y_bar = mean(Y)
num = 0
den = 0
for (i in 1:length(X)){
num = num + (X[i]-X_bar)*(Y[i]-Y_bar)
den = den + (X[i]-X_bar)^2
}
b1 = num/den
b0 = Y_bar - b1*X_bar
SSM = 0
SST = 0
for (i in 1:length(X)){
SSM = SSM + (Y[0] - Y_bar)^2
SST = SST + ((X[i]*b1 + b0) - Y_bar)^2
}
R2 = SSM/SST
return(list(b0, b1, R2))
}
lm <- lm_reg(data$age, data$charges)
plot <- ggplot(data, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm[[1]], slope = lm[[2]], color="red") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression\nCharges vs Ages") +
theme(plot.title = element_text(hjust = 0.5))
plot
R2 = lm[[3]]
R2 = lm[[3]]
R2
View(lm)
lm_reg <- function(X, Y){
X_bar = mean(X)
Y_bar = mean(Y)
num = 0
den = 0
for (i in 1:length(X)){
num = num + (X[i]-X_bar)*(Y[i]-Y_bar)
den = den + (X[i]-X_bar)^2
}
b1 = num/den
b0 = Y_bar - b1*X_bar
SSM = 0
SST = 0
for (i in 1:length(X)){
SSM = SSM + (Y[i] - Y_bar)^2
SST = SST + ((X[i]*b1 + b0) - Y_bar)^2
}
R2 = SSM/SST
return(list(b0, b1, R2))
}
lm <- lm_reg(data$age, data$charges)
plot <- ggplot(data, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm[[1]], slope = lm[[2]], color="red") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression\nCharges vs Ages") +
theme(plot.title = element_text(hjust = 0.5))
plot
R2 = lm[[3]]
R2
lm <- lm_reg(data$age, data$charges)
R2 = lm[[3]]
R2
plot <- ggplot(data, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm[[1]], slope = lm[[2]], color="red") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression\nCharges vs Ages") +
theme(plot.title = element_text(hjust = 0.5))
plot
lm_reg <- function(X, Y){
X_bar = mean(X)
Y_bar = mean(Y)
num = 0
den = 0
for (i in 1:length(X)){
num = num + (X[i]-X_bar)*(Y[i]-Y_bar)
den = den + (X[i]-X_bar)^2
}
b1 = num/den
b0 = Y_bar - b1*X_bar
y_gorro = c()
for (i in 1:length(X)){
y_gorro = c(y_gorro, (X[i]*b1 + b0))
}
R2 = cor(Y, y_gorro)
return(list(b0, b1, R2))
}
lm <- lm_reg(data$age, data$charges)
R2 = lm[[3]]
R2
lm_reg <- function(X, Y){
X_bar = mean(X)
Y_bar = mean(Y)
num = 0
den = 0
for (i in 1:length(X)){
num = num + (X[i]-X_bar)*(Y[i]-Y_bar)
den = den + (X[i]-X_bar)^2
}
b1 = num/den
b0 = Y_bar - b1*X_bar
y_gorro = c()
for (i in 1:length(X)){
y_gorro = c(y_gorro, (X[i]*b1 + b0))
}
R2 = cor(Y, y_gorro)
adjusted_R2 = (1 - ((1-R2)*(length(X)-1))/(length(X)-2))
return(list(b0, b1, R2, adjusted_R2))
}
lm <- lm_reg(data$age, data$charges)
R2 = lm[[3]]
adjusted_R2 = lm[[4]]
R2
adjusted_R2
plot <- ggplot(data, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm[[1]], slope = lm[[2]], color="red") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression\nCharges vs Ages") +
theme(plot.title = element_text(hjust = 0.5))
plot
# Calculo de la matriz de correlacion para su visualización
smokers <- data(data$smoker == "yes")
non_smokers <- data(data$smoker == "no")
correlation_smokers = cor(smokers[c(1,3,4,7)])
# Calculo de la matriz de correlacion para su visualización
smokers <- data[data$smoker == "yes"]
data <- read.csv("insurance.csv", stringsAsFactors = T)
head(data)
# Calculo de la matriz de correlacion para su visualización
smokers <- data[data$smoker == "yes",]
non_smokers <- data[data$smoker == "no",]
correlation_smokers = cor(smokers[c(1,3,4,7)])
correlation_non_smokers = cor(non_smokers[c(1,3,4,7)])
round(correlation_smokers, 3)
round(correlation_non_smokers, 3)
# Calculo de la matriz de correlacion para su visualización
smokers <- data[data$smoker == "yes",]
non_smokers <- data[data$smoker == "no",]
correlation_smokers = cor(smokers[c(1,3,4,7)])
correlation_non_smokers = cor(non_smokers[c(1,3,4,7)])
print("smokers:")
round(correlation_smokers, 3)
print("")
print("non smokers:")
round(correlation_non_smokers, 3)
# Calculo de la matriz de correlacion para su visualización
smokers <- data[data$smoker == "yes",]
non_smokers <- data[data$smoker == "no",]
correlation_smokers = cor(smokers[c(1,3,4,7)])
correlation_non_smokers = cor(non_smokers[c(1,3,4,7)])
print("smokers:")
round(correlation_smokers, 3)
print("non smokers:")
round(correlation_non_smokers, 3)
lm_reg <- function(X, Y){
X_bar = mean(X)
Y_bar = mean(Y)
num = 0
den = 0
for (i in 1:length(X)){
num = num + (X[i]-X_bar)*(Y[i]-Y_bar)
den = den + (X[i]-X_bar)^2
}
b1 = num/den
b0 = Y_bar - b1*X_bar
y_gorro = c()
for (i in 1:length(X)){
y_gorro = c(y_gorro, (X[i]*b1 + b0))
}
R2 = cor(Y, y_gorro)
adjusted_R2 = (1 - ((1-R2)*(length(X)-1))/(length(X)-2))
return(list(b0, b1, R2, adjusted_R2))
}
lm_smokers <- lm_reg(data$bmi, data$charges)
lm_non_smokers <- lm_reg(data$age, data$charges)
lm_smokers <- lm_reg(data$bmi, data$charges)
lm_non_smokers <- lm_reg(data$age, data$charges)
print(paste("smokers: R2=", lm_smokers[[3]], " adjusted_R2=", lm_smokers[[4]]))
print(paste("non smokers: R2=", lm_non_smokers[[3]], " adjusted_R2=", lm_non_smokers[[4]]))
lm_smokers <- lm_reg(smokers$bmi, smokers$charges)
lm_non_smokers <- lm_reg(non_smokers$age, non_smokers$charges)
print(paste("smokers: R2=", lm_smokers[[3]], " adjusted_R2=", lm_smokers[[4]]))
print(paste("non smokers: R2=", lm_non_smokers[[3]], " adjusted_R2=", lm_non_smokers[[4]]))
plot <- ggplot(smokers, aes(x=bmi, y=charges)) +
geom_point() +
geom_abline(intercept = lm_smokers[[1]], slope = lm_smokers[[2]], color="red") +
xlab("BMI") +
ylab("Charges") +
ggtitle("Simple Linear Regression for Smokers\nCharges vs BMI") +
theme(plot.title = element_text(hjust = 0.5))
plot
plot <- ggplot(non_smokers, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm_non_smokers[[1]], slope = lm_non_smokers[[2]], color="red") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression for Non Smokers\nCharges vs Age") +
theme(plot.title = element_text(hjust = 0.5))
plot
plot <- ggplot(non_smokers, aes(x=age, y=charges)) +
geom_point() +
geom_abline(intercept = lm_non_smokers[[1]], slope = lm_non_smokers[[2]], color="blue") +
xlab("Ages") +
ylab("Charges") +
ggtitle("Simple Linear Regression for Non Smokers\nCharges vs Age") +
theme(plot.title = element_text(hjust = 0.5))
plot
